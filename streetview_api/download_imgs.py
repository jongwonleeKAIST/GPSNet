""" @ Info
- Written: 20180. 05. 08
- REF: https://github.com/robolyst/streetview
- dependencies:
    - pip install git+https://github.com/robolyst/streetview
    - key is required to download images : from https://developers.google.com/maps/documentation/streetview/
        - in my case: key = 'AIzaSyDtGECh2UoXSW61Bo5n7h-ZaPuT1lOtlsM'
"""

""" @ API
[1]
streetview.api_download(panoid, heading, flat_dir, key)
- Download an image using the official API. These are not panoramas.

Params:
- panoid:	the panorama id
- heading:	the heading of the photo. Each photo is taken with a 360 camera. You need to specify a direction in degrees as the photo will only cover a partial region of the panorama. The recommended headings to use are 0, 90, 180, or 270.
- flat_dir:	the direction to save the image to.
- key:	your API key. (You can find instructions to obtain an API key here: https://developers.google.com/maps/documentation/streetview/)

[2]
streetview.download_tiles(tiles, directory, disp=False)
- Downloads all the tiles in a Google Stree View panorama into a directory.

Params:
- tiles: the list of tiles. This is generated by tiles_info(panoid)
- directory: the directory to dump the tiles to.
r
[3]
streetview.panoids(lat, lon, disp=False)
- Gets the closest panoramas (ids) to the GPS coordinates.

[4]
streetview.stitch_tiles(panoid, tiles, directory, final_directory)
- Stitches all the tiles of a panorama together. The (pre-downloaded) tiles are located in directory.

[5]
streetview.tiles_info(panoid)
- Generate a list of a panoramas tiles and their position.
- The return format is (x, y, filename, fileurl)
"""

### step 0: setups
# load the libraries
import streetview
import random
import os
import shutil
import csv
import sys

# load my key
key = 'AIzaSyDtGECh2UoXSW61Bo5n7h-ZaPuT1lOtlsM'

# please specify the dataset csv file name you want to use.
datafilename = 'dataset_{}.csv'.format(sys.argv[1])


# save dir
ImgSaveDir = '../img_files/raw_{}/'.format(sys.argv[2])
if not os.path.exists(ImgSaveDir):
    os.makedirs(ImgSaveDir)


# Target GPS coordinate
targetLat = None
targetLon = None


# load dataset csv which contains lat lon information.
with open(datafilename) as csvDataFile:
    csvReader = csv.reader(csvDataFile)

    num_true_data = -1
    num_count = 0
    for row in csvReader:
        num_count += 1

        targetLat = float(row[0])
        targetLon = float(row[1])

        ### step 1: Get near panoids. via roughly giving a gps coordinate [latitude, longitue], it returns near panoids.
        panoIdsNearTargetGPS = streetview.panoids(lat=targetLat, lon=targetLon)
        nPanoIdsNearTargetGPS = len(panoIdsNearTargetGPS)
        print(nPanoIdsNearTargetGPS, 'nearby panorama images are detected.')

        #for n in range(nPanoIdsNearTargetGPS):
        #    print(panoIdsNearTargetGPS[n])

        # Slect a image panoid which exactly corresponds to the target Lat and Lon coordinate that you've specified.


        checkpoint = 0
        for n in range(nPanoIdsNearTargetGPS):
            if panoIdsNearTargetGPS[n]['lat'] == targetLat:
                num_true_data += 1
                # Slect a image panoid which exactly corresponds to the target Lat and Lon coordinate that you've specified.
                print "Selected image: "
                print panoIdsNearTargetGPS[n]
                index = n   # Save its index
                """
                NOTE: images are two types:
                - A. heading-image
                - B. patches-stitched (patches should be first downloaded.)
                """

                ### step 2-A: [type 1] (for the given existing panoid) using panorama-ID, download images

                #Location = str("%05d" % num_true_data) + '_' + str(targetLat) + '_' + str(targetLon)
                Location = str(targetLat) + '_' + str(targetLon)
                panoid = panoIdsNearTargetGPS[index]['panoid']
                
                """
                headings = [0, 90, 180, 270]  # we recommend do not change this part
                for ithHeading in headings:
                    HeadingImgSaveDir = ImgSaveDir + Location + '/HeadingImgs/'

                    if not os.path.exists(HeadingImgSaveDir):
                        os.makedirs(HeadingImgSaveDir)

                    streetview.api_download(panoid, ithHeading, HeadingImgSaveDir, key)

                print('{} Heading imgs Saved.'.format(num_true_data))
                """

                ### step 2-B: [type 2]
                # 2-B-1: download pathes
                PatchesSaveDir = ImgSaveDir + Location + '/PatcheImgs/'
                if not os.path.exists(PatchesSaveDir):
                    os.makedirs(PatchesSaveDir)
                streetview.download_tiles(streetview.tiles_info(panoid), PatchesSaveDir)

                print('{} Patch imgs Saved.'.format(num_true_data))

                # 2-B-2: stitching & renaming it
                StitchedImgSaveDir = ImgSaveDir + Location + '/StitchedImgs/'
                if not os.path.exists(StitchedImgSaveDir):
                    os.makedirs(StitchedImgSaveDir)
                streetview.stitch_tiles(panoid, streetview.tiles_info(panoid), PatchesSaveDir, StitchedImgSaveDir)

                original_dir = os.getcwd()
                os.chdir(StitchedImgSaveDir)  # temporarily change directory in order to change stitched image filename.

                old_filename = str(os.listdir(os.getcwd())[0])
                new_filename = Location + '.jpg'
                os.rename(old_filename, new_filename)

                print('{} Stitched-panorama imgs Saved.'.format(num_true_data))

                os.chdir(original_dir)

                ### step 3: remove files which will not be used anymore; especially patch images.
                # 3-a: remove patch images file.
                try:
                    shutil.rmtree(PatchesSaveDir)
                except OSError as e:
                    if e.errno == 2:
                        print 'No such file or directory to remove'
                        pass
                    else:
                        raise

                break

            checkpoint += 1


        if checkpoint == nPanoIdsNearTargetGPS:
            print "Could not find corresponding image {}. Pass to the next url.".format(num_count)
            pass



